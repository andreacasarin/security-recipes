---

- name: Create Django docker image
  docker_image:
    name: stn_django
    dockerfile: "{{ role_path }}/files/django/Dockerfile"
    path: "{{ stn_path }}"

- name: Start postgresql
  docker_container:
    name: stn_postgresql
    image: postgres:9.3
    exposed_ports:
      - 5432
    published_ports:
      - 5432
    volumes:
      - "{{ stn_path }}:/django"
    state: started
    env:
      POSTGRES_PASSWORD: securethenewspassword
      POSTGRES_USER: securethenews
      POSTGRES_DB: securethenewsdb
    user: postgres
  register: pg_container_results

#####

# - name: If grsec, add paxflags cmd to node
#   set_fact:
#     node_grsec_image: "node_grsec"
#   when: ansible_kernel.endswith('grsec')
#
# - name: Build node image with pax flags
#   docker_image:
#     name: "node_grsec:{{ node_tag }}"
#     # Reuse custom NodeJS Dockerfile from CI
#     dockerfile: "{{ role_path }}/files/node/Dockerfile"
#     path: "{{ stn_path }}"
#     tag: "{{ node_tag }}"
#
# - name: Purge existing node container wait flag
#   file:
#     state: absent
#     path: "{{ stn_path }}./.node_complete"
#
# - name: Start node
#   docker_container:
#     name: stn_node
#     image: "{{ node_grsec_image|default('node') }}:{{ node_tag }}"
#     volumes:
#       - "{{ stn_path }}:/django"
#     state: started
#     working_dir: /django
#     command: /bin/ash -c "npm install && touch .node_complete && gulp watch"
#     user: node
#     recreate: yes
#
# - name: Wait for node to finish installing deps
#   wait_for:
#     path: "{{ stn_path }}/.node_complete"

#####

- name: Build node image with python
  docker_image:
    name: "cnode:{{ node_tag }}"
    # Reuse custom NodeJS Dockerfile from CI
    dockerfile: "{{ role_path }}/files/node/Dockerfile"
    path: "{{ stn_path }}"
    tag: "{{ node_tag }}"

- name: Purge existing node container wait flag
  file:
    state: absent
    path: "{{ stn_path }}/.node_complete"

- name: Start node
  docker_container:
    name: stn_node
    image: "cnode:{{ node_tag }}"
    volumes:
      - "{{ stn_path }}:/django"
    state: started
    working_dir: /django
    command: /bin/ash -c "npm install && touch .node_complete && gulp watch"
    user: node
    recreate: yes

- name: Wait for node to finish installing deps
  wait_for:
    path: "{{ stn_path }}/.node_complete"

#####

- name: Establish postgres port
  set_fact:
    pg_port: "{{ lookup('pipe', 'docker port stn_postgresql 5432').split(':')[1] }}"

- name: Map Django port to static host port
  set_fact:
    django_port_publish: "8000"
  when: "lookup('env', 'RAND_PORT') | bool"

- name: Start Django server
  docker_container:
    name: stn_django
    image: "stn_django"
    volumes:
      - "{{ stn_path }}:/var/www/django"
    state: started
    exposed_ports:
      - 8000
    published_ports:
      - "{{ django_port_publish | default('8000:8000') }}"
    working_dir: /var/www/django
    interactive: true
    tty: true
    command: |
      /bin/bash -c "./manage.py migrate; ./manage.py runserver 0.0.0.0:8000"
    user: gcorn
    env:
      DJANGO_DB_PASSWORD: securethenewspassword
      DJANGO_DB_USER: securethenews
      DJANGO_DB_NAME: securethenewsdb
      DJANGO_DB_PORT: 5432
      DJANGO_DB_HOST: "{{ pg_container_results.ansible_facts.docker_container.NetworkSettings.IPAddress }}"
    recreate: yes

#####

# - name: Slap paxflags onto pshtt and python when under grsec
#   command: docker exec -u root stn_django /bin/bash -c "paxctl -Cm $(which python)"
#   when: ansible_kernel.endswith('grsec')

#####

- name: Establish www port
  set_fact:
    www_port: "{{ lookup('pipe', 'docker port stn_django 8000').split(':')[1] }}"

- name: Wait for Django runserver to come up
  uri:
    url: "http://localhost:{{ www_port }}"
    method: GET
    status_code: 200
  register: uri_scrape_result
  until: uri_scrape_result.status == 200
  retries: 10
  delay: 20

- debug:
    msg: >-
      Webserver accessible at http://localhost:{{ www_port }}.
      Postgres accessible at localhost:{{ pg_port }}
